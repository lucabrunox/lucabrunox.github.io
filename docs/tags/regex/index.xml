<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regex on Luca Bruno blog</title>
    <link>https://lucabrun.github.io/tags/regex/</link>
    <description>Recent content in Regex on Luca Bruno blog</description>
    <generator>Hugo 0.125.2</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Sep 2013 16:03:00 -0700</lastBuildDate>
    <atom:link href="https://lucabrun.github.io/tags/regex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Regex in Haskell patterns</title>
      <link>https://lucabrun.github.io/2013/09/regex-in-haskell-patterns.html</link>
      <pubDate>Fri, 06 Sep 2013 16:03:00 -0700</pubDate>
      <guid>https://lucabrun.github.io/2013/09/regex-in-haskell-patterns.html</guid>
      <description>Have you ever wanted to do case expr of regexhere -&amp;gt; &amp;hellip;Â ?&#xA;You can do almost that with view patterns!&#xA;{-# LANGUAGE ViewPatterns #-}&#xA;import Text.Regex.Posix&#xA;-- Helper&#xA;pat :: String -&amp;gt; String -&amp;gt; [[String]]&#xA;pat p s = s =~ p&#xA;-- Function with matching&#xA;foo :: String -&amp;gt; String&#xA;foo (pat &amp;ldquo;foo(bar|baz)&amp;rdquo; -&amp;gt; [[_,x]]) = x&#xA;foo _ = &amp;ldquo;no!&amp;rdquo;&#xA;main :: IO ()&#xA;main = do</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Luca Bruno blog</title>
    <link>https://lucabrun.github.io/tags/algorithms/</link>
    <description>Recent content in Algorithms on Luca Bruno blog</description>
    <generator>Hugo 0.125.2</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jun 2013 13:04:00 -0700</lastBuildDate>
    <atom:link href="https://lucabrun.github.io/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Inline commenting system for blog sites</title>
      <link>https://lucabrun.github.io/2013/06/inline-commenting-system-for-blog-sites.html</link>
      <pubDate>Fri, 28 Jun 2013 13:04:00 -0700</pubDate>
      <guid>https://lucabrun.github.io/2013/06/inline-commenting-system-for-blog-sites.html</guid>
      <description>One side of the idea:&#xA;Lately I&amp;rsquo;ve seen some comment systems that inline comments in the text itself, see an example here.&#xA;Other side of the idea:&#xA;I&amp;rsquo;ve implemented a couple of unsupervised algorithms for news text extraction from web pages in Javascript, and they work generally well. They&amp;rsquo;re also capable of splitting the news text into paragraphs and avoid image captions or other unrelated text.&#xA;The idea:&#xA;Merge the two ideas, as a new commenting service (like Disqus) for blogs, in a modern and interesting way.</description>
    </item>
    <item>
      <title>Probability of a union of independent events algorithm</title>
      <link>https://lucabrun.github.io/2011/08/probability-of-union-of-independent.html</link>
      <pubDate>Tue, 09 Aug 2011 10:29:00 -0700</pubDate>
      <guid>https://lucabrun.github.io/2011/08/probability-of-union-of-independent.html</guid>
      <description>Lately I was looking for a copy &amp;rsquo;n paste algorithm to calculate the probability of a union of independent events that are not mutually exclusive (aka inclusion-exclusion principle in probability). Unfortunately I couldn&amp;rsquo;t find any algorithm for such a basic problem.&#xA;Therefore, I decided to write the following naive algorithm which is fast enough for my purposes (O(n2) in time and space, where n is the number of events), and share with everyone:</description>
    </item>
    <item>
      <title>Bubble sort for prolog</title>
      <link>https://lucabrun.github.io/2011/02/bubble-sort-for-prolog.html</link>
      <pubDate>Thu, 24 Feb 2011 10:30:00 -0800</pubDate>
      <guid>https://lucabrun.github.io/2011/02/bubble-sort-for-prolog.html</guid>
      <description>Hello again,&#xA;this time I&amp;rsquo;ve found a version of bubble sort here. I wanted to provide my version, which is less iterative and, I think, more intuitive. What it does is, simply, bubble until it&amp;rsquo;s sorted:&#xA;bubblesort(L1, L2) :- bubblesort2(L1,L2,unsorted),!. bubblesort2(L,L,sorted). bubblesort2(L1,L2,unsorted) :- bubble(L1,L3,C), bubblesort2(L3,L2,C). bubble(\[\],\[\],sorted). bubble(\[X\],\[X\],sorted). bubble(\[X,Y|L\], \[X|L1\], C) :- X &amp;lt;= Y, bubble(\[Y|L\],L1,C). bubble(\[X,Y|L\], \[Y|L1\], unsorted) :- X \&amp;gt; Y, bubble(\[X|L\],L1,\_). Yes, the exam is tomorrow so I will finally stop annoying you readers ;) </description>
    </item>
    <item>
      <title>Matrix transpose with Prolog</title>
      <link>https://lucabrun.github.io/2011/02/matrix-transpose-with-prolog.html</link>
      <pubDate>Tue, 15 Feb 2011 12:20:00 -0800</pubDate>
      <guid>https://lucabrun.github.io/2011/02/matrix-transpose-with-prolog.html</guid>
      <description>Hello,&#xA;an exam exercise requires me to write a matrix transpose method. I&amp;rsquo;ve written one and it took a little before I was able to define it completely in 4 rules.&#xA;I&amp;rsquo;m curious then I&amp;rsquo;ve found this on stackoverflow: the approach is to calculate first transposed column, then shift by one column and calculate the transpose of that new matrix.&#xA;This was one of the first solutions I&amp;rsquo;ve thought but I haven&amp;rsquo;t realized it because I&amp;rsquo;m too lazy to create a rule for calculating the shifted matrix.</description>
    </item>
  </channel>
</rss>
